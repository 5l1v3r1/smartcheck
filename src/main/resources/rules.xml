<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Rules xmlns="http://www.smartdec.ru/SmartCheck/Conditions" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.smartdec.ru/SmartCheck/Conditions rules-grammar-schema.xsd ">
    <Rule>
        <RuleId>SOLIDITY_ADDRESS_HARDCODED</RuleId>
            <Patterns>
                <!-- фиксирует адреса длиной в 42 символа"-->
                <Pattern patternId="adc165">
                    <Categories>
                         <Category>Solidity</Category>
                    </Categories>
                    <Severity>1</Severity>
                    <TruePositiveRate>2</TruePositiveRate>
                    <XPath>
                        //addressContract[string-length(addressNumber)=42]
                    </XPath>
                </Pattern>
                <!-- фиксирует адреса длиной менее чем 42 символа и не равные 0x0"-->
                <Pattern patternId="b140cd">
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>1</Severity>
                    <TruePositiveRate>2</TruePositiveRate>
                    <XPath>
                        //addressContract[string-length(addressNumber) lt 42 and not(addressNumber[matches(text()[1],"^0x0$")])]
                    </XPath>
                </Pattern>
                <!-- фиксирует конструкции: address(numberLiteral), где numberLiteral не равно 0"-->
                <Pattern patternId="f32db1">
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>1</Severity>
                    <TruePositiveRate>2</TruePositiveRate>
                    <XPath>
                        //addressCall/expression[primaryExpression/numberLiteral][not(primaryExpression/numberLiteral[matches(text()[1],"^0$")]) and not(primaryExpression/identifier[matches(text()[1],"^this$")])]
                    </XPath>
                </Pattern>
                <!-- фиксирует использование адреса address(0), кроме "!=address(0)" и "==address(0)", и кторе тех случаев, когда address(0) внутри event(внутренняя функция, название которой начинается с большой буквы)-->
                <Pattern patternId="a91b18">
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>1</Severity>
                    <TruePositiveRate>1</TruePositiveRate>
                    <XPath>
                        //expression[addressCall/expression/primaryExpression/numberLiteral[matches(text()[1],"^0$")]]
                        /parent::*[not(matches(text()[1],"^==|!=$"))][not(ancestor::internalFunctionCall[1]/functionName/identifier[matches(text()[1],"^[A-Z]")])]
                    </XPath>
                </Pattern>
                <!-- фиксирует использование адреса 0x0, кроме "!=0x0" и "==0x0", и кторе тех случаев, когда 0x0 внутри event(внутренняя функция, название которой начинается с большой буквы)-->
                <Pattern patternId="c67a09">
                    <Categories>
                        <Category>Solidity</Category>
                    </Categories>
                    <Severity>1</Severity>
                    <TruePositiveRate>1</TruePositiveRate>
                    <XPath>
                        //addressContract[addressNumber[matches(text()[1],"^0x0$")]]/parent::*[parent::*[parent::*[not(matches(text()[1],"^==|!=$"))]]][not(ancestor::internalFunctionCall[1]/functionName/identifier[matches(text()[1],"^[A-Z]")])]
                    </XPath>
                </Pattern>
            </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_BALANCE_EQUALITY</RuleId>
        <Patterns>
            <!-- фиксирует конструкции: ".balance ==", ".balance !="-->
            <Pattern patternId="5094ad">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                //expression[expression[matches(text()[1],".balance$")]][matches(text()[1],"^==|!=$")]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_BYTE_ARRAY_INSTEAD_BYTES</RuleId>
        <Patterns>
            <!-- фиксирует конструкцию: "byte[]"-->
            <Pattern patternId="f13a9f">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//typeName[typeName/elementaryTypeName[text()[1]="byte"]][matches(text()[1],"^\[.*\]$")]</XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_CALL_VALUE</RuleId>
        <Patterns>
            <!-- фиксирует конструкцию: "call.value()()"-->
            <Pattern patternId="cc2e04">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //externalFunctionCall/externalFunctionCallNotThis/functionNameAndArgs[functionName/identifier[matches(text()[1],"^call$")] and functionName/identifier[matches(text()[1],"^value$")] and not(callArguments/callArgument)]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_DELETE_FOR_ARRAYS</RuleId>
        <Patterns>
            <!--Фиксирует ... .length=0-->
            <Pattern patternId="792a6d">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //simpleStatement/expressionStatement/expression[expression[matches(text()[1],".length")]][matches(text()[1],"^=$")][expression/primaryExpression/numberLiteral[matches(text()[1],"^0$")]]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_DEPRECATED_CONSTRUCTIONS</RuleId>
        <Patterns>
            <!--Фиксирует конструкцию: "suicide"-->
            <Pattern patternId="27cb59">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionName/identifier[matches(text()[1],"suicide")] |
                    //assemblyItem/identifier[matches(text()[1],"suicide")]
                </XPath>
            </Pattern>
            <!--Фиксирует конструкцию: "sha3"-->
            <Pattern patternId="187b5a">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionName/identifier[matches(text()[1],"^sha3$")] |
                    //functionalAssemblyExpression/identifier[matches(text()[1],"sha3")]
                </XPath>
            </Pattern>
            <!--Фиксирует конструкцию: "throw"-->
            <Pattern patternId="49bd2a">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //statement/throwRevertStatement[matches(text()[1],"throw")]
                </XPath>
            </Pattern>
            <!-- фиксирует использование типа constant в определении функции-->
            <Pattern patternId="28fa69">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionDefinition[stateMutability/constantType]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_DOS_WITH_THROW</RuleId>
        <Patterns>
            <!-- пока отключаем -->
            <!-- фиксирует конструкцию: "if (... внешний вызов ...) {throw, revert}"-->
            <!-- <Pattern patternId="637fdc">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>//ifStatement[ifCondition//externalFunctionCall][block/statement//throwRevertStatement]</XPath>
            </Pattern> -->
            <!-- пока отключаем -->
            <!-- фиксирует конструкцию: "for (... внешний вызов ...)"-->
            <!-- <Pattern patternId="efb788">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>//forStatement/expression//externalFunctionCall</XPath>
            </Pattern> -->
            <!-- пока отключаем -->
            <!-- фиксирует конструкцию: "while (... внешний вызов ...)"-->
            <!-- <Pattern patternId="04242c">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>//whileStatement/whileCondition//externalFunctionCall</XPath>
            </Pattern> -->
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_ERC20_APPROVE</RuleId>
        <Patterns>
            <!--Фиксирует конструкции: имя контракта содержит token или erc20 либо наследуется от контракта содержащего такое в названии. В этом контракте есть определение функции approve, которая не является интерфейсом-->
            <Pattern patternId="af782c">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //contractDefinition[identifier[matches(text()[1],"token|erc20","i")] or inheritanceSpecifier/userDefinedTypeName/identifier[matches(text()[1],"token|erc20","i")]]
                    //functionDefinition[block/statement][identifier[matches(text()[1],"^approve$")]]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_ERC20_FUNCTIONS_ALWAYS_RETURN_FALSE</RuleId>
        <Patterns>
            <!--Фиксирует конструкции: имя контракта содержит token или erc20 либо наследуется от контракта содержащего такое в названии.
            В этом контракте есть определение функции с названием transfer,transferFrom или approve, которая возвращающает значение типа bool и не является интерфейсом.
            В определении этой функции не содержится return или присваивание возвращаемого параметра (в текущей реализации проверяется присваивание только для первого возращаемого параметра)-->
            <Pattern patternId="b180ca">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //contractDefinition[identifier[matches(text()[1],"token|erc20","i")]  or inheritanceSpecifier/userDefinedTypeName/identifier[matches(text()[1],"token|erc20","i")]]
                    //functionDefinition[block/statement][identifier[matches(text()[1],"^transfer|transferFrom|approve$")]][returnsParameters/parameterList/parameter/typeName/elementaryTypeName[matches(text()[1],"bool")]]
                    [count(descendant-or-self::*[returnStatement])=0]
                    [not(block//expression[matches(text()[1],"=")]/expression[1]//identifier[matches(text()[1],ancestor::functionDefinition/returnsParameters/parameterList/parameter[1]/identifier)])]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_ERC20_TRANSFER_SHOULD_THROW</RuleId>
        <Patterns>
            <!--Фиксирует конструкции: имя контракта содержит token или erc20 либо наследуется от контракта содержащего такое в названии.
             В этом контракте есть определение функции, содержащей в названии transfer или transferFrom, возвращающей значение типа bool, которая не является интерфейсом.
             В определении этой функции не содержатся функции revert, require, assert, throw, кроме того нет любых вызовов функций-->
            <Pattern patternId="550a42">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //contractDefinition[identifier[matches(text()[1],"token|erc20","i")] or inheritanceSpecifier/userDefinedTypeName/identifier[matches(text()[1],"token|erc20","i")]]
                    //functionDefinition[block/statement]
                    [identifier[matches(text()[1],"^transfer(From)?$")]]
                    [returnsParameters/parameterList/parameter/typeName/elementaryTypeName[matches(text()[1],"bool")]]
                    [count(descendant-or-self::*[functionCall] | descendant-or-self::*[statement/throwRevertStatement])=0]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
    <RuleId>SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN</RuleId>
    <Patterns>
        <!--Фиксирует функции, у которых есть возвращаемые параметры без идентификатора(returns(uint,...)), и в теле функции нет return-->
        <Pattern patternId="47acc2">
            <Categories>
                <Category>Solidity</Category>
            </Categories>
            <Severity>1</Severity>
            <XPath>
                //functionDefinition[block]/returnsParameters[count(parameterList/parameter) > count(parameterList/parameter/identifier)]/parent::*[not(block/statement//returnStatement)]
            </XPath>
        </Pattern>
        <!--Фиксирует конструкцию: "function(...) ... returns (type name) {...}" - в теле функции нет присваивания "name=" и нет return (в данной реализации если параметров на выходе несколько, то проверяется только первый)-->
        <Pattern patternId="58bdd3">
            <Categories>
                <Category>Solidity</Category>
            </Categories>
            <Severity>1</Severity>
            <XPath>
                //functionDefinition
                [block]
                [not(block/statement//returnStatement)]
                [returnsParameters/parameterList/parameter[1]/identifier]
                [not(block//expression[matches(text()[1],"=")]/expression[1]//identifier[matches(text()[1],ancestor::functionDefinition/returnsParameters/parameterList/parameter[1]/identifier)])]
            </XPath>
        </Pattern>
    </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_GAS_LIMIT_IN_LOOPS</RuleId>
        <Patterns>
            <!-- for (<инициализация счетчика>; <счетчик меньше чем не numberLiteral; <увеличение счетчика>) {меняющися адрес или интерфейс, или внешний вызов}-->
            <Pattern patternId="f6f853">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //forStatement
                    [expression[2][matches(text()[1],"&lt;|&lt; =")]/expression[2][not(primaryExpression/numberLiteral)]] <!-- счетчик меньше чем не numberLiteral -->
                    [expression[3][twoPlusMinusOperator/incrementOperator or lvalueOperator/plusLvalueOperator or expression[2]/plusminusOperator/plusOperator or //functionName/identifier[matches(text()[1],"^add$")]]] <!-- увеличение счетчика -->
                    [block//expression[matches(text()[1],"^=$")]/expression[1]//identifier[text()[1]=(ancestor::functionDefinition//addressDeclaration/identifier) <!-- присваивание локальному адресу внутри цикла -->
                    or text()[1]=(ancestor::functionDefinition//variableDeclaration[typeName/userDefinedTypeName]/identifier)] <!-- присваивание локальному интерфейсу(пользовательский тип) -->
                    or block//externalFunctionCallNotThis/callObjectExpression//identifier[text()[1]=(ancestor::functionDefinition//addressDeclaration/identifier) <!-- внешний вызов локального адреса -->
                    or text()[1]=(ancestor::contractDefinition//variableDeclaration[typeName/userDefinedTypeName]/identifier)]] <!-- внешний вызов локального интерфейса(пользовательский тип) -->
                </XPath>
            </Pattern>
            <!-- for (<инициализация счетчика не числом>; <счетчик больше чем что угодно>; <уменьшение счетчика>) {меняющися адрес или интерфейс, или внешний вызов}-->
            <Pattern patternId="12cf32">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //forStatement
                    [expression[1][not(variableDeclaration/expression/primaryExpression/numberLiteral)]] <!-- инициализация счетчика не числом -->
                    [expression[2][matches(text()[1],"&gt;|&gt; =")]] <!-- счетчик больше чем что угодно -->
                    [expression[3][twoPlusMinusOperator/decrementOperator or lvalueOperator/minusLvalueOperator or expression[2]/plusminusOperator/minusOperator or //functionName/identifier[matches(text()[1],"^sub$")]]] <!-- уменьшение счетчика -->
                    [block//expression[matches(text()[1],"^=$")]/expression[1]//identifier[text()[1]=(ancestor::functionDefinition//addressDeclaration/identifier) <!-- присваивание локальному адресу внутри цикла -->
                    or text()[1]=(ancestor::functionDefinition//variableDeclaration[typeName/userDefinedTypeName]/identifier)] <!-- присваивание локальному интерфейсу(пользовательский тип) -->
                    or block//externalFunctionCallNotThis/callObjectExpression//identifier[text()[1]=(ancestor::functionDefinition//addressDeclaration/identifier) <!-- внешний вызов локального адреса -->
                    or text()[1]=(ancestor::contractDefinition//variableDeclaration[typeName/userDefinedTypeName]/identifier)]] <!-- внешний вызов локального интерфейса(пользовательский тип) -->
                </XPath>
            </Pattern>
            <!--Фиксируется конструкция: while (в условии все, кроме вызова функции и числа)-->
            <Pattern patternId="17f23a">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//whileStatement/whileCondition[not(descendant-or-self::functionCall) and not(expression/expression/primaryExpression/numberLiteral)]</XPath>
            </Pattern>
            <!--Фиксируется конструкция: while (в условии вызов функции)-->
            <Pattern patternId="38f6c7">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>//whileStatement[whileCondition/descendant::functionCall]</XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_LOCKED_MONEY</RuleId>
        <Patterns>
            <!--Фиксируются ситуации, когда в контракте имеется функция типа payable, но нет функций suicide, selfdestruct, transfer, send, .value-->
            <Pattern patternId="30281d">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //contractDefinition[contractPartDefinition[functionDefinition/stateMutability/payableType or functionFallBackDefinition/stateMutability/payableType]]
                    [not(contractPartDefinition/functionDefinition/block//functionCall/internalFunctionCall/functionName/identifier[matches(text()[1],"^suicide|selfdestruct$")])]
                    [not(contractPartDefinition/functionDefinition/block//functionCall/externalFunctionCall/externalFunctionCallNotThis/functionNameAndArgs/functionName/identifier[matches(text()[1],"^transfer|send$")])]
                    [not(contractPartDefinition/functionDefinition/block//functionCall/externalFunctionCall/externalFunctionCallNotThis/functionNameAndArgs/functionName/identifier[matches(text()[1],"^value$")])]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_PRAGMAS_VERSION</RuleId>
        <Patterns>
            <!--Фиксируется определение pragma имеющее в версии знаки '^' | '>=' | '>' | '<' | '<='-->
            <Pattern patternId="23fc32">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//pragmaDirective/pragmaValue//versionOperator</XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA</RuleId>
        <Patterns>
            <!--Фиксируется определение state переменных с типом видимости private-->
            <Pattern patternId="5616b2">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//stateVariableDeclaration/visibleType[text()[1]="private"]</XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_PURE_FUNCTION</RuleId>
        <Patterns>
            <Pattern patternId="11314f">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>0</Severity>
                <XPath>
                    //functionDefinition[stateMutability/pureType and block/descendant-or-self::*[
                    <!--Accessing <address>.balance: using .balance-->
                    expression[matches(text()[1],".balance")]
                    <!--Accessing any of the members of block, tx, msg (with the exception of msg.sig and msg.data)-->
                    or environmentalVariableDefinition[matches(text()[1],"msg.value|msg.gas|msg.sender|block.timestamp|tx.origin|block.blockhash|block.coinbase|block.difficulty|block.gaslimit|block.number|block.blockhash|block.coinbase|tx.gasprice")]
                    <!--Using selfdestruct and it's alias suicide:-->
                    or functionCall/internalFunctionCall/functionName/identifier[matches(text()[1],"^selfdestruct|suicide$")]
                    <!--Sending Ether via calls:-->
                    or externalFunctionCallNotThis/functionNameAndArgs/functionName/identifier[matches(text()[1],"^send|transfer$")]
                    <!--Using low-level calls:-->
                    or externalFunctionCallNotThis/functionNameAndArgs/functionName/identifier[matches(text()[1],"^call|delegatecall|callcode$")]
                    <!--Using inline assembly that contains certain opcodes:-->
                    or inlineAssemblyStatement
                    ]
                    ]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_REDUNDANT_FALLBACK_REJECT</RuleId>
        <Patterns>
            <!--Фиксируется случаи, когда версия компилятора больше или равна 0.4.0, контракт содержит fallback функцию типа payable, в определении которой есть только один statement: throw или revert() -->
            <Pattern patternId="b85a32">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //sourceUnit[pragmaDirective/pragmaValue/version/versionConstraint[versionLiteral &gt;= "0.4.0"]]/contractDefinition/contractPartDefinition/functionFallBackDefinition/block[count(descendant-or-self::statement)=1]
                    [statement/throwRevertStatement]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_REVERT_REQUIRE</RuleId>
        <Patterns>
            <!--Фиксирует конструкцию: "if (...){revert(); или throw;}"-->
            <Pattern patternId="c56b12">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <TruePositiveRate>3</TruePositiveRate>
                <XPath>
                    //ifStatement/block/statement/throwRevertStatement/ancestor-or-self::statement[2]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_SEND</RuleId>
        <Patterns>
            <!--Фиксируется использование функции send, в случаях: if (..send()){revert() или throw} и require или assert от send-->
            <Pattern patternId="430636">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //functionName/identifier[text()[1]="send"][ancestor::ifCondition/parent::*[block//statement/throwRevertStatement] or ancestor::internalFunctionCall/functionName/identifier[matches(text()[1],"^require|assert$")]]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_SHOULD_RETURN_STRUCT</RuleId>
        <Patterns>
            <!--Фиксируются internal или private функции, у которых больше одного выходного параметра-->
            <Pattern patternId="7d54ca">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //functionDefinition[(visibleType[matches(text()[1],"internal|private")])or(not(visibleType))]
                    /returnsParameters/parameterList[count(parameter)>1]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_TIMESTAMP_DEPENDENCE</RuleId>
        <Patterns>
            <!--Фиксируется случаи, когда выражение содержит "== or = block.timestamp or now"-->
            <Pattern patternId="1955d9">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>//expression[matches(text()[1],"^==|!=$") and expression//environmentalVariableDefinition[matches(text()[1],"^block.timestamp|now$")]]</XPath>
            </Pattern>
            <!--Фиксируется случаи, когда в вызове функции в качестве аргусентов передаются block.timestamp или now. А также, когда в выражении используется "= и далее выражение содержащее  block.timestamp или now" -->
            <Pattern patternId="cd1537">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //statement[simpleStatement//functionCall[internalFunctionCall or externalFunctionCall]//callArguments[ not(callArgument//expression[matches(text()[1],"^>=|>|&lt;|&lt;=$")]) and callArgument//expression[environmentalVariableDefinition[matches(text()[1],"^block.timestamp|now$")]]]
                    or simpleStatement/expressionStatement//expression[matches(text()[1],"^=$") and expression//environmentalVariableDefinition[matches(text()[1],"^block.timestamp|now$")]]]
                </XPath>
            </Pattern>
            <!-- пока отключаем -->
            <!--Фиксируется все вхождения block.timestamp или now-->
            <!-- <Pattern patternId="afb67a">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>0</Severity>
                <XPath>
                    //expression/environmentalVariableDefinition[matches(text()[1],"block.timestamp|now")]/ancestor-or-self::statement
                </XPath>
            </Pattern> -->
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_TX_ORIGIN</RuleId>
        <Patterns>
            <!--Фиксируется вхождение tx.origin-->
            <Pattern patternId="12e802">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>//environmentalVariableDefinition[matches(text()[1],"^tx.origin$")]/parent::*[parent::*[not(matches(text()[1],"^==|!=$") and expression/environmentalVariableDefinition[matches(text()[1],"^msg.sender$")])]]</XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_UNCHECKED_CALL</RuleId>
        <Patterns>
            <!--Фиксируется случаи, когда вызовы функций  call, delegatecall, send, callcode не имеют предков по дереву: if, require, assert, return, вызов функции, не входит в определение переменной-->
            <Pattern patternId="f39eed">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>3</Severity>
                <XPath>
                    //externalFunctionCall/externalFunctionCallNotThis[functionNameAndArgs/functionName/identifier[matches(text()[1],"^call|delegatecall|send|callcode$")] and not(ancestor::ifCondition) and not(ancestor::internalFunctionCall[functionName/identifier[matches(text()[1],"^require|assert$")]]) and not(ancestor::returnStatement) and not(ancestor::functionCall[2]) and not(ancestor::variableDeclarationStatement)]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_UNCHECKED_MATH</RuleId>
        <Patterns>
            <!--Фиксирует все вхождения decrement, -, -=, ... -->
            <Pattern patternId="87b5ac">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //expression[ancestor::contractDefinition[not(identifier[matches(text()[1],"SafeMath")])] or ancestor::libraryDefinition[not(identifier[matches(text()[1],"SafeMath")])]][last()][descendant-or-self::*[decrementOperator or minusOperator or minusLvalueOperator]]/ancestor-or-self::expression[last()]
                </XPath>
            </Pattern>
            <!--Фиксирует все вхождения /,/=,%,%= -->
            <Pattern patternId="16dca5">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //expression[ancestor::contractDefinition[not(identifier[matches(text()[1],"SafeMath")])] or ancestor::libraryDefinition[not(identifier[matches(text()[1],"SafeMath")])]][last()][descendant-or-self::*[divOperator or divRemOperator or divRemLvalueOperator or divLvalueOperator]]/ancestor-or-self::expression[last()]
                </XPath>
            </Pattern>
            <!-- пока отключаем -->
            <!--Фиксирует все вхождения + с константой,+= с константой, ++,-->
            <!-- <Pattern patternId="50dc28">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>0</Severity>
                <XPath>
                    //expression[ancestor::contractDefinition[not(identifier[matches(text()[1],"SafeMath")])] or ancestor::libraryDefinition[not(identifier[matches(text()[1],"SafeMath")])]][last()][descendant-or-self::*[plusminusOperator[plusOperator]/parent::*[expression/primaryExpression/numberLiteral] or lvalueOperator[plusLvalueOperator]/parent::*[expression/primaryExpression/numberLiteral] or incrementOperator]]/ancestor-or-self::expression[last()]
                </XPath>
            </Pattern> -->
            <!--Фиксирует все вхождения +, += где нет сложения с константой-->
            <Pattern patternId="61c5ab">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //expression[ancestor::contractDefinition[not(identifier[matches(text()[1],"SafeMath")])] or ancestor::libraryDefinition[not(identifier[matches(text()[1],"SafeMath")])]][last()][descendant-or-self::*[plusminusOperator[plusOperator]/parent::*[not(expression/primaryExpression/numberLiteral)] or lvalueOperator[plusLvalueOperator]/parent::*[not(expression/primaryExpression/numberLiteral)]]]/ancestor-or-self::expression[last()]
                </XPath>
            </Pattern>
            <!--Фиксирует все вхождения *,**,*=-->
            <Pattern patternId="7dc23a">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>
                    //expression[ancestor::contractDefinition[not(identifier[matches(text()[1],"SafeMath")])] or ancestor::libraryDefinition[not(identifier[matches(text()[1],"SafeMath")])]][last()][descendant-or-self::*[mulLvalueOperator or powerOperator or mulOperator]]/ancestor-or-self::expression[last()]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_UNDERFLOW_OVERFLOW</RuleId>
        <Patterns>
            <!--Фиксирует конструкцию: "for (...; i >= 0; ...) { ... }"-->
            <Pattern patternId="11ca45b">
            <Categories>
                <Category>Solidity</Category>
            </Categories>
            <Severity>1</Severity>
            <TruePositiveRate>3</TruePositiveRate>
            <XPath>
                //forStatement/expression[matches(text()[1],">=")][expression/primaryExpression/numberLiteral[matches(text()[1],"^0$")]]
            </XPath>
        </Pattern>
            <!--Фиксирует конструкцию: "...>=0"-->
            <Pattern patternId="d48ac4">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <TruePositiveRate>3</TruePositiveRate>
                <XPath>
                    //expression[matches(text()[1],">=")][expression/primaryExpression/numberLiteral[matches(text()[1],"^0$")]]/ancestor-or-self::statement
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_USING_BLOCKHASH</RuleId>
        <Patterns>
            <!--Фиксирует конструкцию: "blockhash"-->
            <Pattern patternId="b629ad">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //expression[//environmentalVariableDefinition[matches(text()[1],"block.blockhash")]]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_USING_INLINE_ASSEMBLY</RuleId>
        <Patterns>
            <!--Фиксирует конструкцию: "assembly", кроме конструкции: assembly { ... := extcodesize(...) }-->
            <Pattern patternId="109cd5">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>
                    //statement/inlineAssemblyStatement/inlineAssemblyBlock/assemblyStatement[not(assemblyItem/assemblerLocalVariables[matches(text()[1],"^:=$")][functionalAssemblyExpression/identifier[matches(text()[1],"^extcodesize$")]])]/ancestor::inlineAssemblyStatement
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_VAR</RuleId>
        <Patterns>
            <!--Фиксируется случаи определения переменных, как var ...= число-->
            <Pattern patternId="d28aa7">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <XPath>//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"^var$")]][expression//primaryExpression/numberLiteral[matches(text()[1],"^[0-9]+$")]]</XPath>
            </Pattern>
            <!--Фиксируется случаи определения переменных, как var имя переменной-->
            <Pattern patternId="f77619">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//variableDeclaration[typeName/elementaryTypeName[matches(text()[1],"^var$")]][expression/primaryExpression/identifier]</XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_VAR_IN_LOOP_FOR</RuleId>
        <Patterns>
            <!-- фиксирует конструкцию: "for (var ...; ... число более 255; ... ++)"-->
            <Pattern patternId="f176ab">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>2</Severity>
                <TruePositiveRate>3</TruePositiveRate>
                <XPath>//forStatement[expression[1]//typeName/elementaryTypeName[matches(text()[1],"^var$")]][expression[2]/expression/primaryExpression[numberLiteral[matches(text()[1],"^[0-9]+$")]&gt; 255]][expression[3]/twoPlusMinusOperator/incrementOperator]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_VIEW_FUNCTION</RuleId>
        <Patterns>
            <Pattern patternId="189abf">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>0</Severity>
                <!--Writing to state variables - лучше сделать через флаги-->
                <!--Emitting events - лучше сделать через флаги-->
                <!--Creating other contracts - лучше сделать через флаги-->
                <!--Calling any function not marked view or pure:- лучше сделать через флаги-->
                <XPath>
                    //functionDefinition[stateMutability/viewType and block/descendant-or-self::*[
                        <!--Using selfdestruct and it's alias suicide:-->
                        functionCall/internalFunctionCall/functionName/identifier[matches(text()[1],"^selfdestruct|suicide$")]
                        <!--Sending Ether via calls:-->
                        or externalFunctionCallNotThis/functionNameAndArgs/functionName/identifier[matches(text()[1],"^send|transfer$")]
                        <!--Using low-level calls:-->
                        or externalFunctionCallNotThis/functionNameAndArgs/functionName/identifier[matches(text()[1],"^call|delegatecall|callcode$")]
                        <!--Using inline assembly that contains certain opcodes:-->
                        or inlineAssemblyStatement
                    ]
                    ]
                </XPath>
            </Pattern>
        </Patterns>
    </Rule>
    <Rule>
        <RuleId>SOLIDITY_VISIBILITY</RuleId>
        <Patterns>
            <!-- фиксирует ситуацию, когда в интерфейсе для функции или fallback функции видимость не external-->
            <Pattern patternId="23rt6g">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//interfaceDefinition/contractPartDefinition/(functionDefinition|functionFallBackDefinition)/visibleType[not(matches(text()[1],"^external$"))]
                </XPath>
            </Pattern>
            <!-- фиксирует ситуацию, когда для функции или fallback функции не определена видимость-->
            <Pattern patternId="910067">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//(functionDefinition|functionFallBackDefinition)[not(visibleType)]</XPath>
            </Pattern>
            <!-- фиксирует ситуацию, когда в контракте для fallback функции видимость не external или public-->
            <Pattern patternId="d67c21">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//contractDefinition/contractPartDefinition/functionFallBackDefinition/visibleType[not(matches(text()[1],"^external|public$"))]</XPath>
            </Pattern>
            <!-- фиксирует ситуацию, когда для переменной состояния не определена видимость-->
            <Pattern patternId="b51ce0">
                <Categories>
                    <Category>Solidity</Category>
                </Categories>
                <Severity>1</Severity>
                <XPath>//stateVariableDeclaration[not(visibleType)]</XPath>
            </Pattern>
        </Patterns>
    </Rule>
</Rules>